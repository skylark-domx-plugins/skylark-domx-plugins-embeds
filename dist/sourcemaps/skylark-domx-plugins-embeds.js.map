{"version":3,"sources":["skylark-domx-plugins-embeds.js"],"names":["define","skylark","attach","createIframe","$","plugins","embeds","$window","window","$document","document","EmbedRunner","Plugin","inherit","klassName","pluginName","options","runnerUrl","runnerName","_construct","elm","this","overrided","runner","origin","prepare","_inited","promise","Deferred","url","className","sandbox","frameBorder","name","contentWindowName","onload","postMessage","on","event","handleMessage","originalEvent","setup","iframe","resolve","onerror","err","reject","_elm","arg","cmd","html","inited","runnerFrame","contentWindow","error","console","warn","apply","concat","slice","call","arguments","data","JSON","parse","e","message","type","stringify","complete","store","sessionStorage","removeItem","focus","method","args","_console","console:load:script:success","trigger","console:load:script:error","console:load:dom:success","console:load:dom:error","langx","noder","prototype","videoId","playerId","clickToPlay","canPlayType","loadAPI","scriptTag","called","that","apiUrl","scriptTags","getElementsByTagName","i","length","callback","playOnReady","play","src","createElement","parentNode","insertBefore","test","readyState","onReady","ready","player","addEvent","hasPlayed","onPlaying","onPause","playStatus","emit","insertIframe","replace","id","replaceChild","navigator","platform","api","$f","pause","EmbedYoutube","playerVars","onYouTubeIframeAPIReady","defer","checkSeek","stateChange","YT","PlayerState","PAUSED","ENDED","onStateChange","PLAYING","onError","playVideo","Player","events","pauseVideo","main"],"mappings":"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","file":"../skylark-domx-plugins-embeds.js","sourcesContent":["define('skylark-domx-plugins-embeds/embeds',[\r\n    \"skylark-langx-ns\"\r\n], function(skylark) {\r\n    'use strict';\r\n    return skylark.attach(\"domx.plugins.embeds\");\r\n});\r\n\ndefine('skylark-domx-plugins-embeds/embed-runner',[\r\n    \"skylark-domx-iframes/create\",\r\n    \"skylark-domx/query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./embeds\"\r\n], function(createIframe, $, plugins,embeds) {\r\n\r\n    'use strict';\r\n    // move from render/live.js\r\n\r\n  /** ============================================================================\r\n   * Skylark Html Viewer\r\n   * Messages to and from the runner.\r\n   * ========================================================================== */\r\n\r\n  var \r\n      $window = $(window),\r\n      $document = $(document);\r\n\r\n\r\n  var EmbedRunner =  plugins.Plugin.inherit({\r\n\r\n    klassName: \"EmbedRunner\",\r\n\r\n    pluginName : \"domx.EmbedRunner\",\r\n\r\n    options : {\r\n      runnerUrl : \"\",\r\n      runnerName : \"\"\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n\r\n       /**\r\n        * Store what runner origin *should* be\r\n        * TODO this should allow anything if x-origin protection should be disabled\r\n       */\r\n       this.runner = {};\r\n       this.runner.origin = '*';\r\n\r\n    },\r\n\r\n    /**\r\n     * Render live preview.\r\n     * Create the runner iframe, and if postMe wait until the iframe is loaded to\r\n     * start postMessaging the runner.\r\n     */\r\n    prepare :  function () {\r\n\r\n      if (this._inited) {\r\n        return this._inited.promise;\r\n      }\r\n\r\n      this._inited = new Deferred();\r\n\r\n      // Basic mode\r\n      // This adds the runner iframe to the page. It's only run once.\r\n      //if (!$live.find('iframe').length) {\r\n        /*\r\n        iframe = noder.create(\"iframe\",{\r\n          ///iframe.src = jsbin.runner;\r\n          src : this.options.runnerUrl\r\n        },{\r\n          \"class\" : \"stretch\",\r\n          \"sandbox\", \"allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\",\r\n          \"frameBorder\": '0',\r\n          \"name\", \"<proxy>\",\r\n        },this._elm);\r\n\r\n        try {\r\n          ///iframe.contentWindow.name = '/' + jsbin.state.code + '/' + jsbin.state.revision;\r\n          iframe.contentWindow.name  = this.options.runnerName;\r\n        } catch (e) {\r\n          // ^- this shouldn't really fail, but if we're honest, it's a fucking mystery as to why it even works.\r\n          // problem is: if this throws (because iframe.contentWindow is undefined), then the execution exits\r\n          // and `var renderLivePreview` is set to undefined. The knock on effect is that the calls to renderLivePreview\r\n          // then fail, and jsbin doesn't boot up. Tears all round, so we catch.\r\n        }\r\n      //}\r\n\r\n      iframe.onload = () => {\r\n        if (window.postMessage) {\r\n          // setup postMessage listening to the runner\r\n          $window.on('message', (event) => {\r\n            this.handleMessage(event.originalEvent)\r\n          });\r\n          this.setup(iframe);\r\n          this._inited.resolve();\r\n        }\r\n      };\r\n\r\n      iframe.onerror = (err) => {\r\n        this._inited.reject(err);\r\n      };\r\n      */\r\n\r\n      createIframe({\r\n        \"url\" : this.options.runnerUrl,\r\n        \"className\" : \"stretch\",\r\n        \"sandbox\" : \"allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\",\r\n        \"frameBorder\": '0',\r\n        \"name\": \"<proxy>\",\r\n        \"contentWindowName\": this.options.runnerName,\r\n        \"onload\" : () => {\r\n          if (window.postMessage) {\r\n            // setup postMessage listening to the runner\r\n            $window.on('message', (event) => {\r\n              this.handleMessage(event.originalEvent)\r\n            });\r\n            this.setup(iframe);\r\n            this._inited.resolve();\r\n          }\r\n        },\r\n        \"onerror\" : (err) => {\r\n          this._inited.reject(err);\r\n        }\r\n      },this._elm);\r\n\r\n      /**\r\n       * Events\r\n       */\r\n\r\n      $document.on('codeChange.live', (event, arg) => {\r\n        if (arg.origin === 'setValue' || arg.origin === undefined) {\r\n          return;\r\n        }\r\n        ///store.sessionStorage.removeItem('runnerPending');\r\n      });\r\n\r\n      // Listen for console input and post it to the iframe\r\n      $document.on(\"console:run\", (event, cmd)  => {\r\n        this.postMessage('console:run', cmd);\r\n      });\r\n\r\n      $document.on('console:load:script', (event, url) => {\r\n        this.postMessage('console:load:script', url);\r\n      });\r\n\r\n      $document.on('console:load:dom', (event, html) => {\r\n        this.postMessage('console:load:dom', html);\r\n      });\r\n\r\n      /* not need ? // lwf\r\n       * When the iframe resizes, update the size text\r\n      this.resize = (function () {\r\n        var $size = this.$().find('.size');\r\n\r\n        var hide = func.debounce(function () {\r\n          $size.fadeOut(200);\r\n        }, 2000);\r\n\r\n        var embedResizeDone = false;\r\n\r\n        return function (data) {\r\n          \r\n          ///if (!jsbin.embed) {\r\n          ///  // Display the iframe size in px in the JS Bin UI\r\n          ///  size.show().html(data.width + 'px');\r\n          ///  hide();\r\n          ///}\r\n          ///if (jsbin.embed && self !== top && embedResizeDone === false) {\r\n          if (embedResizeDone === false) {\r\n            embedResizeDone = true;\r\n            // Inform the outer page of a size change\r\n            var height = ($body.outerHeight(true) - $(this.runner.iframe).height()) + data.offsetHeight;\r\n           window.parent.postMessage({ height: height }, '*');\r\n          }\r\n        };\r\n      }());\r\n      */\r\n      \r\n      return inited.promise;\r\n    },\r\n\r\n\r\n    /**\r\n     * Setup the renderer\r\n     */\r\n    setup : function (runnerFrame) {\r\n      this.runner.window = runnerFrame.contentWindow;\r\n      this.runner.iframe = runnerFrame;\r\n    },\r\n\r\n    /**\r\n     * Log error messages, indicating that it's from the renderer.\r\n     */\r\n    error : function () {\r\n      // it's quite likely that the error that fires on this handler actually comes\r\n      // from another service on the page, like a browser plugin, which we can\r\n      // safely ignore.\r\n      window.console.warn.apply(console, ['Renderer:'].concat([].slice.call(arguments)));\r\n    },\r\n\r\n    /**\r\n     * Handle all incoming postMessages to the renderer\r\n     */\r\n    handleMessage : function (event) {\r\n      if (!event.origin) return;\r\n      var data = event.data;\r\n\r\n      if (typeof data !== 'string') {\r\n        // this event isn't for us (i.e. comes from a browser ext)\r\n        return;\r\n      }\r\n\r\n      // specific change to handle reveal embedding\r\n      /*\r\n       // Unnecessary? //lwf\r\n      try {\r\n        if (event.data.indexOf('slide:') === 0 || event.data === 'jsbin:refresh') {\r\n          // reset the state of the panel visibility\r\n          jsbin.panels.allEditors(function (p) {\r\n            p.visible = false;\r\n          });\r\n          jsbin.panels.restore();\r\n          return;\r\n        }\r\n      } catch (e) {}\r\n      */\r\n\r\n      try {\r\n        data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\r\n      } catch (e) {\r\n        return this.error('Error parsing event data:', e.message);\r\n      }\r\n\r\n      /*\r\n       // Unnecessary? //lwf\r\n      if (data.type.indexOf('code:') === 0 && jsbin.embed) {\r\n        var panel = data.type.substr(5);\r\n        if (panel === 'js') { panel = 'javascript'; }\r\n        if (' css javascript html '.indexOf(' ' + panel + ' ') === -1) {\r\n          return renderer.error('No matching event handler:', data.type);\r\n        }\r\n\r\n        if (!jsbin.state.metadata.pro) {\r\n          return renderer.error('Code injection is only supported on pro created bins');\r\n        }\r\n\r\n        jsbin.panels.named[panel].setCode(data.data);\r\n        renderLivePreview();\r\n\r\n        return;\r\n      }\r\n      */\r\n\r\n      if (typeof this[data.type] !== 'function') {\r\n        return false; //renderer.error('No matching handler for event', data);\r\n      }\r\n      try {\r\n        this[data.type](data.data);\r\n      } catch (e) {\r\n        this.error(e.message);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Send message to the runner window\r\n     */\r\n    postMessage : function (type, data) {\r\n      if (!this.runner.window) {\r\n        return this.error('postMessage: No connection to runner window.');\r\n      }\r\n      this.runner.window.postMessage(JSON.stringify({\r\n        type: type,\r\n        data: data\r\n      }), this.runner.origin);\r\n    },\r\n\r\n    /**\r\n     * When the renderer is complete, it means we didn't hit an initial\r\n     * infinite loop\r\n     */\r\n    complete : function () {\r\n      try {\r\n        store.sessionStorage.removeItem('runnerPending');\r\n      } catch (e) {}\r\n    },\r\n\r\n    /**\r\n     * Pass loop protection hit calls up to the error UI\r\n    renderer.loopProtectHit = function (line) {\r\n      var cm = jsbin.panels.named.javascript.editor;\r\n\r\n      // grr - more setTimeouts to the rescue. We need this to go in *after*\r\n      // jshint does it's magic, but jshint set on a setTimeout, so we have to\r\n      // schedule after.\r\n      setTimeout(function () {\r\n        var annotations = cm.state.lint.annotations || [];\r\n        if (typeof cm.updateLinting !== 'undefined') {\r\n          // note: this just updated the *source* reference\r\n          annotations = annotations.filter(function (a) {\r\n            return a.source !== 'loopProtectLine:' + line;\r\n          });\r\n          annotations.push({\r\n            from: CodeMirror.Pos(line-1, 0),\r\n            to: CodeMirror.Pos(line-1, 0),\r\n            message: 'Exiting potential infinite loop.\\nTo disable loop protection: add \"// noprotect\" to your code',\r\n            severity: 'warning',\r\n            source: 'loopProtectLine:' + line\r\n          });\r\n\r\n          cm.updateLinting(annotations);\r\n        }\r\n      }, cm.state.lint.options.delay || 0);\r\n    };\r\n     */\r\n\r\n\r\n\r\n    /**\r\n     * When the iframe focuses, simulate that here\r\n     */\r\n    focus : function () {\r\n      ///jsbin.panels.focus(jsbin.panels.named.live);\r\n      // also close any open dropdowns\r\n      ///closedropdown();\r\n    },\r\n\r\n    /**\r\n     * Proxy console logging to JS Bin's console\r\n     */\r\n    console : function (data) {\r\n      var method = data.method,\r\n          args = data.args;\r\n\r\n      if (!window._console) {return;}\r\n      if (!window._console[method]) {method = 'log';}\r\n\r\n      // skip the entire console rendering if the console is hidden\r\n      ///if (!jsbin.panels.named.console.visible) { return; }\r\n\r\n      window._console[method].apply(window._console, args);\r\n    },\r\n\r\n    /**\r\n     * Load scripts into rendered iframe\r\n     */\r\n    'console:load:script:success' : function (url) {\r\n      $document.trigger('console:load:script:success', url);\r\n    },\r\n\r\n    'console:load:script:error' : function (err) {\r\n      $document.trigger('console:load:script:error', err);\r\n    },\r\n\r\n    /**\r\n     * Load DOME into rendered iframe\r\n     * TODO abstract these so that they are automatically triggered\r\n     */\r\n    'console:load:dom:success' : function (url) {\r\n      $document.trigger('console:load:dom:success', url);\r\n    },\r\n\r\n    'console:load:dom:error' : function (err) {\r\n      $document.trigger('console:load:dom:error', err);\r\n    }\r\n\r\n  });\r\n\r\n  return embeds.EmbedRunner = EmbedRunner;\r\n});\r\n\ndefine('skylark-domx-plugins-embeds/embed-vimeo',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n  './embeds'\r\n], function (langx, noder, $, plugins, embeds) {\r\n  'use strict'\r\n\r\n  var EmbedVimeo = plugins.Plugin.inherit({\r\n    klassName: \"EmbedVimeo\",\r\n\r\n    pluginName : \"domx.EmbedVimeo\",\r\n\r\n    options : {\r\n\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      //url, videoId, playerId, clickToPlay) \r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this.url = options.url\r\n      this.videoId = options.videoId\r\n      this.playerId = options.playerId\r\n      this.clickToPlay = options.clickToPlay\r\n\r\n      ///this.element = document.createElement('div')\r\n    },\r\n\r\n    canPlayType: function () {\r\n      return true\r\n    },\r\n\r\n    loadAPI: function () {\r\n      var that = this\r\n      var apiUrl = '//f.vimeocdn.com/js/froogaloop2.min.js'\r\n      var scriptTags = document.getElementsByTagName('script')\r\n      var i = scriptTags.length\r\n      var scriptTag\r\n      var called\r\n\r\n      function callback() {\r\n        if (!called && that.playOnReady) {\r\n          that.play()\r\n        }\r\n        called = true\r\n      }\r\n      while (i) {\r\n        i -= 1\r\n        if (scriptTags[i].src === apiUrl) {\r\n          scriptTag = scriptTags[i]\r\n          break\r\n        }\r\n      }\r\n      if (!scriptTag) {\r\n        scriptTag = document.createElement('script')\r\n        scriptTag.src = apiUrl\r\n      }\r\n      $(scriptTag).on('load', callback)\r\n      scriptTags[0].parentNode.insertBefore(scriptTag, scriptTags[0])\r\n      // Fix for cached scripts on IE 8:\r\n      if (/loaded|complete/.test(scriptTag.readyState)) {\r\n        callback()\r\n      }\r\n    },\r\n\r\n    onReady: function () {\r\n      var that = this\r\n      this.ready = true\r\n      this.player.addEvent('play', function () {\r\n        that.hasPlayed = true\r\n        that.onPlaying()\r\n      })\r\n      this.player.addEvent('pause', function () {\r\n        that.onPause()\r\n      })\r\n      this.player.addEvent('finish', function () {\r\n        that.onPause()\r\n      })\r\n      if (this.playOnReady) {\r\n        this.play()\r\n      }\r\n    },\r\n\r\n    onPlaying: function () {\r\n      if (this.playStatus < 2) {\r\n        this.emit(\"playing\");\r\n        this.playStatus = 2\r\n      }\r\n    },\r\n\r\n    onPause: function () {\r\n      this.emit(\"pause\");\r\n      delete this.playStatus\r\n    },\r\n\r\n    insertIframe: function () {\r\n      var iframe = document.createElement('iframe')\r\n      iframe.src = this.url\r\n        .replace('VIDEO_ID', this.videoId)\r\n        .replace('PLAYER_ID', this.playerId)\r\n      iframe.id = this.playerId\r\n      this._elm.parentNode.replaceChild(iframe, this._elm)\r\n      this._elm = iframe\r\n    },\r\n\r\n    play: function () {\r\n      var that = this\r\n      if (!this.playStatus) {\r\n        this.emit(\"play\");\r\n        this.playStatus = 1\r\n      }\r\n      if (this.ready) {\r\n        if (\r\n          !this.hasPlayed &&\r\n          (this.clickToPlay ||\r\n            (window.navigator &&\r\n              /iP(hone|od|ad)/.test(window.navigator.platform)))\r\n        ) {\r\n          // Manually trigger the playing callback if clickToPlay\r\n          // is enabled and to workaround a limitation in iOS,\r\n          // which requires synchronous user interaction to start\r\n          // the video playback:\r\n          this.onPlaying()\r\n        } else {\r\n          this.player.api('play')\r\n        }\r\n      } else {\r\n        this.playOnReady = true\r\n        if (!window.$f) {\r\n          this.loadAPI()\r\n        } else if (!this.player) {\r\n          this.insertIframe()\r\n          this.player = $f(this._elm)\r\n          this.player.addEvent('ready', function () {\r\n            that.onReady()\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    pause: function () {\r\n      if (this.ready) {\r\n        this.player.api('pause');\r\n      } else if (this.playStatus) {\r\n        delete this.playOnReady;\r\n        this.emit(\"pause\");\r\n        delete this.playStatus;\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  return embeds.EmbedYoutube = EmbedYoutube;\r\n\r\n});\ndefine('skylark-domx-plugins-embeds/embed-youtube',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n  './embeds'\r\n], function (langx, noder, $, plugins, embeds) {\r\n  'use strict'\r\n\r\n  var EmbedYoutube = plugins.Plugin.inherit({\r\n    klassName: \"EmbedYoutube\",\r\n\r\n    pluginName : \"domx.EmbedYoutube\",\r\n\r\n    options : {\r\n\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      // videoId, playerVars, clickToPlay\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this.videoId = options.videoId;\r\n      this.playerVars = options.playerVars;\r\n      this.clickToPlay = options.clickToPlay;\r\n      ///this.element = document.createElement('div');\r\n    },\r\n\r\n    canPlayType: function () {\r\n      return true;\r\n    },\r\n\r\n    loadAPI: function () {\r\n      var that = this,\r\n        onYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady,\r\n        apiUrl = 'https://www.youtube.com/iframe_api',\r\n        scriptTags = document.getElementsByTagName('script'),\r\n        i = scriptTags.length,\r\n        scriptTag;\r\n\r\n      window.onYouTubeIframeAPIReady = function () {\r\n        if (onYouTubeIframeAPIReady) {\r\n          onYouTubeIframeAPIReady.apply(this);\r\n        }\r\n        if (that.playOnReady) {\r\n          that.play();\r\n        }\r\n      }\r\n      while (i) {\r\n        i -= 1\r\n        if (scriptTags[i].src === apiUrl) {\r\n          return\r\n        }\r\n      }\r\n      scriptTag = document.createElement('script')\r\n      scriptTag.src = apiUrl\r\n      scriptTags[0].parentNode.insertBefore(scriptTag, scriptTags[0])\r\n    },\r\n\r\n    onReady: function () {\r\n      this.ready = true;\r\n      if (this.playOnReady) {\r\n        this.play()\r\n      }\r\n    },\r\n\r\n    onPlaying: function () {\r\n      if (this.playStatus < 2) {\r\n        this.emit(\"playing\");\r\n        this.playStatus = 2;\r\n      }\r\n    },\r\n\r\n    onPause: function () {\r\n      langx.defer(()=>{\r\n        this.checkSeek();\r\n      },2000)\r\n    },\r\n\r\n    checkSeek: function () {\r\n      if (\r\n        this.stateChange === YT.PlayerState.PAUSED ||\r\n        this.stateChange === YT.PlayerState.ENDED\r\n      ) {\r\n        // check if current state change is actually paused\r\n        this.emit(\"pause\");\r\n        delete this.playStatus\r\n      }\r\n    },\r\n\r\n    onStateChange: function (event) {\r\n      switch (event.data) {\r\n        case YT.PlayerState.PLAYING:\r\n          this.hasPlayed = true\r\n          this.onPlaying()\r\n          break\r\n        case YT.PlayerState.PAUSED:\r\n        case YT.PlayerState.ENDED:\r\n          this.onPause()\r\n          break\r\n      }\r\n      // Save most recent state change to this.stateChange\r\n      this.stateChange = event.data\r\n    },\r\n\r\n    onError: function (event) {\r\n      this.trigger(\"error\", event);\r\n    },\r\n\r\n    play: function () {\r\n      var that = this\r\n      if (!this.playStatus) {\r\n        this.emit(\"play\");\r\n        this.playStatus = 1;\r\n      }\r\n      if (this.ready) {\r\n        if (\r\n          !this.hasPlayed &&\r\n          (this.clickToPlay ||\r\n            (window.navigator &&\r\n              /iP(hone|od|ad)/.test(window.navigator.platform)))\r\n        ) {\r\n          // Manually trigger the playing callback if clickToPlay\r\n          // is enabled and to workaround a limitation in iOS,\r\n          // which requires synchronous user interaction to start\r\n          // the video playback:\r\n          this.onPlaying();\r\n        } else {\r\n          this.player.playVideo();\r\n        }\r\n      } else {\r\n        this.playOnReady = true;\r\n        if (!(window.YT && YT.Player)) {\r\n          this.loadAPI();\r\n        } else if (!this.player) {\r\n          this.player = new YT.Player(this._elm, {\r\n            videoId: this.videoId,\r\n            playerVars: this.playerVars,\r\n            events: {\r\n              onReady: function () {\r\n                that.onReady()\r\n              },\r\n              onStateChange: function (event) {\r\n                that.onStateChange(event)\r\n              },\r\n              onError: function (event) {\r\n                that.onError(event)\r\n              }\r\n            }\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    pause: function () {\r\n      if (this.ready) {\r\n        this.player.pauseVideo()\r\n      } else if (this.playStatus) {\r\n        delete this.playOnReady\r\n        this.emit(\"pause\");\r\n        delete this.playStatus\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  return embeds.EmbedYoutube = EmbedYoutube;\r\n});\ndefine('skylark-domx-plugins-embeds/main',[\r\n\t\"./embeds\",\r\n\t\"./embed-runner\",\r\n\t\"./embed-vimeo\",\r\n\t\"./embed-youtube\"\r\n],function(embeds){\r\n\treturn embeds;\r\n});\ndefine('skylark-domx-plugins-embeds', ['skylark-domx-plugins-embeds/main'], function (main) { return main; });\n\n"]}